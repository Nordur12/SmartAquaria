# Smart Aquaria (Android App)

Smart Aquaria is a React Native Android app for monitoring and controlling your aquarium remotely. It supports real-time sensor data (pH, temperature, turbidity), device registration, feeding control, water filtering, and push notifications.

## Requirements

- Node.js (v18+)
- React Native CLI
- Android Studio (with SDK and emulator or USB debugging)
- Firebase project (Authentication, Firestore, Realtime Database, FCM)
- Supabase CLI
- Arduino device with sensors and servo motor

## Setup & Run

### 1. Clone and install dependencies
```
git clone https://github.com/yourusername/smart-aquaria.git
cd smart-aquaria
npm install
```

### 2. Install React Native CLI globally
```
npm install -g react-native-cli
```

### 3. Install Supabase CLI globally
```
npm install -g supabase
```

### 4. Initialize Supabase
```
supabase login
supabase init
```

### 5. Firebase setup
- Create a Firebase project at https://console.firebase.google.com
- Enable Authentication (Email/Password), Firestore, Realtime Database, and Cloud Messaging (FCM)
- Add a Web app in Firebase project settings and copy the config
- Create `firebaseConfig.ts` in your project and paste:
```ts
const firebaseConfig = {
  apiKey: "YOUR_API_KEY",
  authDomain: "YOUR_PROJECT_ID.firebaseapp.com",
  databaseURL: "https://YOUR_PROJECT_ID.firebaseio.com",
  projectId: "YOUR_PROJECT_ID",
  storageBucket: "YOUR_PROJECT_ID.appspot.com",
  messagingSenderId: "YOUR_SENDER_ID",
  appId: "YOUR_APP_ID"
};
export default firebaseConfig;
```

### 6. Create Supabase Edge Function for push notifications

Create new function:
```
supabase functions new sendNotification
```

Replace content of `supabase/functions/sendNotification/index.ts` with:

```ts
import { serve } from "https://deno.land/std@0.177.0/http/server.ts";

serve(async (req) => {
  const { deviceId, title, body } = await req.json();

  const response = await fetch("https://fcm.googleapis.com/fcm/send", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "Authorization": "key=YOUR_FIREBASE_SERVER_KEY"
    },
    body: JSON.stringify({
      to: `/topics/${deviceId}`,
      notification: { title, body }
    })
  });

  return new Response("Notification sent");
});
```

Deploy the function:
```
supabase functions deploy sendNotification
```

### 7. Run the app on Android device or emulator
```
npx react-native run-android
```

### 8. Arduino device setup
- Upload firmware to Arduino that reads sensor data (pH, temp, turbidity)
- Send data to Firebase Realtime Database or Firestore
- Use a unique `deviceId` matching app input

### 9. Use the app
- Register with email/password
- Register your device using the `deviceId`
- Monitor sensors, feed fish, control pump, receive notifications

---

## Summary
- Firebase Authentication & Database enabled
- Real-time sensor monitoring
- Feeding & water filtering controls
- Supabase Edge function connected to Firebase Cloud Messaging

---