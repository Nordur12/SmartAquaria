# Smart Aquaria 

Smart Aquarium Capstone Project

This project is a Capstone Project focused on building a Smart Aquarium System using various sensors and actuators to automate and monitor the aquatic environment.

## Android Application Setup
----
## Requirements

- Node.js (v18+)
- React Native CLI
- Android Studio (with SDK and emulator or USB debugging)
- Firebase project (Authentication, Firestore, Realtime Database, FCM)
- Supabase CLI
- Arduino device with sensors and servo motor

## Setup & Run

### 1. Clone and install dependencies
```
git clone https://github.com/yourusername/smart-aquaria.git
cd smart-aquaria
npm install
```

### 2. Install React Native CLI globally
```
npm install -g react-native-cli
```

### 3. Install Supabase CLI globally
```
npm install -g supabase
```

### 4. Initialize Supabase
```
supabase login
supabase init
```

### 5. Firebase setup
- Create a Firebase project at https://console.firebase.google.com
- Enable Authentication (Email/Password), Firestore, Realtime Database, and Cloud Messaging (FCM)
- Add a Web app in Firebase project settings and copy the config
- Create `firebaseConfig.ts` in your project and paste:
```ts
const firebaseConfig = {
  apiKey: "YOUR_API_KEY",
  authDomain: "YOUR_PROJECT_ID.firebaseapp.com",
  databaseURL: "https://YOUR_PROJECT_ID.firebaseio.com",
  projectId: "YOUR_PROJECT_ID",
  storageBucket: "YOUR_PROJECT_ID.appspot.com",
  messagingSenderId: "YOUR_SENDER_ID",
  appId: "YOUR_APP_ID"
};
export default firebaseConfig;
```

### 6. Create Supabase Edge Function for push notifications

Create new function:
```
supabase functions new sendNotification
```

Replace content of `supabase/functions/sendNotification/index.ts` with:

```ts
import { serve } from "https://deno.land/std@0.177.0/http/server.ts";

serve(async (req) => {
  const { deviceId, title, body } = await req.json();

  const response = await fetch("https://fcm.googleapis.com/fcm/send", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "Authorization": "key=YOUR_FIREBASE_SERVER_KEY"
    },
    body: JSON.stringify({
      to: `/topics/${deviceId}`,
      notification: { title, body }
    })
  });

  return new Response("Notification sent");
});
```

Deploy the function:
```
supabase functions deploy sendNotification
```

### 7. Run the app on Android device or emulator
```
npx react-native run-android
```

### 8. Arduino device setup
- Upload firmware to Arduino that reads sensor data (pH, temp, turbidity)
- Send data to Firebase Realtime Database or Firestore
- Use a unique `deviceId` matching app input

### 9. Use the app
- Register with email/password
- Register your device using the `deviceId`
- Monitor sensors, feed fish, control pump, receive notifications

---

## Summary
- Firebase Authentication & Database enabled
- Real-time sensor monitoring
- Feeding & water filtering controls
- Supabase Edge function connected to Firebase Cloud Messaging

---
## DEVICE SETUP

Components Used
Turbidity Sensor – Measures water clarity

pH Level Sensor – Monitors water acidity/alkalinity

DS18B20 Temperature Sensor – Measures water temperature

Servo Motor – Controls automatic fish feeding

Submersible Pump Motor – Manages water change system

---

Features
Wi-Fi Configuration – Easily connect to any Wi-Fi using captive portal

App-Controlled Feeding – Trigger fish feeding through the mobile app

App-Controlled Water Change – Remotely activate water cycling system

---

Arduino Libraries Used:

<WiFi.h> – Connects the ESP32 to Wi-Fi networks

<OneWire.h> – Enables communication with the DS18B20 temperature sensor

<DallasTemperature.h> – Reads temperature data from the DS18B20

<FirebaseESP32.h> – Connects and interacts with Firebase Realtime Database

<Preferences.h> – Saves and retrieves data (e.g., device settings) in flash memory

<WebServer.h> – Hosts a local web server for custom Wi-Fi setup or diagnostics


---

🔧 Installation & Usage Guide
Smart Aquarium System using ESP32

This section explains how to install, upload, and use the Smart Aquarium System on your ESP32 device.

STEP 1. Required Tools & Software
Arduino IDE (latest version recommended)

- ESP32 Board Package

Libraries (install via Library Manager or manually):

- WiFi.h (included with ESP32 board package)

- OneWire

- DallasTemperature

- FirebaseESP32 by Mobizt

- Preferences (built-in)

- WebServer (included with ESP32 package)

---

STEP 2. Wiring and Connections
Component	-- > ESP32 Pin
DS18B20	-- > GPIO 4
Turbidity Sensor -- >	GPIO 34
pH Sensor	-- > GPIO 35
Servo Motor (Feeder) -- >	GPIO 15
Water Pump (Relay) -- >	GPIO 14
GND/Power -- >	3.3V / GND

⚠️ Adjust pin numbers in the code if you use different wiring.

---

STEP 3. Firebase Setup
1. Go to Firebase Console

2. Create a project

3. Add a Realtime Database

4. Get your:

- Database URL

- API Key

- User UID

NOTE: THIS SETUP DEPENDS ON WHAT WILL YOU USE! (MYSQL,POSTGRESQL and so on..)

---

STEP 4. Upload Code to ESP32
- Open your .ino file in Arduino IDE

- Go to Tools > Board and select "ESP32 Dev Module"

- Connect your ESP32 via USB

- Select the correct COM Port

- Click Upload 

---

STEP 5. First-Time Wi-Fi Setup

- On first boot, ESP32 starts in Access Point Mode

- Connect your phone to ESP32-AP Wi-Fi

- A captive portal opens automatically

- Select your home Wi-Fi network and enter the password

- ESP32 will connect and save credentials

AND YOUR DONE!

---

STEP 6. Using the Mobile App
(Assuming you’ve built or are using a React-based web/mobile app linked to Firebase)

Feeding: Tap the Feed Fish button to activate the servo

Water Change: Tap the Start Water Change to run the pump

Monitor: View real-time sensor data like pH, temperature, and turbidity

---

> This project showcases practical applications of IoT and embedded systems in aquaculture.